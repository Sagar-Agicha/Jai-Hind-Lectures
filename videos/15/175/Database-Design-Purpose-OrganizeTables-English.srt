<b>Narration</b>

1
00:00:00 --> 00:00:03
Welcome to the <b>Spoken tutorial</b> on <b>LibreOffice Base</b>.

2
00:00:04 --> 00:00:08
In this tutorial, we will learn the following topics on database design:

3
00:00:09 --> 00:00:11
Determining the purpose of our database

4
00:00:12 --> 00:00:14
Finding and organizing the information required

5
00:00:15 --> 00:00:18
Dividing the information into tables.

6
00:00:19 --> 00:00:20
What is <b>Database Design</b>?

7
00:00:21 --> 00:00:27
'Database design' is the process of producing a detailed data model of a database.

8
00:00:28 --> 00:00:31
With a good design, a database can

9
00:00:32 --> 00:00:36
provide up-to-date, accurate and complete information.

10
00:00:37 --> 00:00:42
Which means- we can ensure integrity of our information at various levels,

11
00:00:43 --> 00:00:47
meet our needs of data processing and reporting

12
00:00:48 --> 00:00:50
and easily accommodate change.

13
00:00:51 --> 00:00:56
The process of database design consists of the following steps:

14
00:00:57 --> 00:00:59
Determine the purpose of our database

15
00:01:00 --> 00:01:03
Find and organize the information required

16
00:01:04 --> 00:01:06
Divide the information into <b>tables</b>

17
00:01:07 --> 00:01:10
Turn information items into <b>columns</b>

18
00:01:11 --> 00:01:13
Specify <b>primary keys</b>

19
00:01:14 --> 00:01:16
Set up the <b>table relationship</b>s

20
00:01:17 --> 00:01:19
Refine our design

21
00:01:20 --> 00:01:22
Apply the <b>normalization</b> rules

22
00:01:23 --> 00:01:27
And finally, test, <b>run</b> the database and maintain.

23
00:01:28 --> 00:01:31
Okay, let us go to the first step which is-

24
00:01:32 --> 00:01:34
Determine the purpose of our database.

25
00:01:35 --> 00:01:37
Let us consider a simple <b>Library Application</b>.

26
00:01:38 --> 00:01:40
A library usually has books.

27
00:01:41 --> 00:01:44
And these books are issued to its registered members.

28
00:01:45 --> 00:01:50
So, we need a <b>Library application</b> to maintain a list of books and members.

29
00:01:51 --> 00:01:55
And track the issuing of this books to its members.

30
00:01:56 --> 00:02:00
Our first step is to find and organize the required information.

31
00:02:01 --> 00:02:08
Here is where we gather all of the types of information we want to record in the database.

32
00:02:09 --> 00:02:16
Now that we know the purpose of the 'Library application', let us identify the items here.

33
00:02:17 --> 00:02:18
There are books.

34
00:02:19 --> 00:02:23
A <b>Book</b> has a <b>title</b>, an <b>author</b>, a <b>publisher</b> and a <b>price</b>.

35
00:02:24 --> 00:02:32
And we can also store the author’s information such as, date of birth and country he or she belongs to.

36
00:02:33 --> 00:02:37
We can also store the publisher’s name, address and phone.

37
00:02:38 --> 00:02:44
Also,  there are the 'Library' members who have names, phone numbers and addresses.

38
00:02:45 --> 00:02:48
Now when a book is issued to a member, there is a-

39
00:02:49 --> 00:02:55
book issue date, return date, actual return date and the checked-in status.

40
00:02:56 --> 00:03:00
These individual items are also called <b>attribute</b>s.

41
00:03:01 --> 00:03:07
Each of these attributes represents a potential <b>column</b> in a <b>table</b>.

42
00:03:08 --> 00:03:11
At this point, we can formulate questions such as:

43
00:03:12 --> 00:03:19
How do we add information about a set of fresh books supplied to the Library by a publisher?

44
00:03:20 --> 00:03:24
How do we maintain a list of its members?

45
00:03:25 --> 00:03:31
What if a member leaves or a member wants to change his/her address?

46
00:03:32 --> 00:03:37
How do we update the information when a book is returned by a member?

47
00:03:38 --> 00:03:41
What kind of <b>report</b>s would we want to produce?

48
00:03:42 --> 00:03:45
Which books are most read among the readers?

49
00:03:46 --> 00:03:54
And how do we generate a list of books which are over due to be returned by members who have borrowed them?

50
00:03:55 --> 00:04:01
Now that we have some details, let us see how we can divide the information into tables.

51
00:04:02 --> 00:04:10
We will divide our information items or attributes into major entities or subjects.

52
00:04:11 --> 00:04:13
Each subject then becomes a table.

53
00:04:14 --> 00:04:20
So, the preliminary list of tables looks like the image shown on the screen.

54
00:04:21 --> 00:04:25
The major subjects or <b>entities</b> shown here are the books and the members.

55
00:04:26 --> 00:04:32
Therefore, it makes sense to start out with two tables, one for books and one for members.

56
00:04:33 --> 00:04:36
Let us now look at the <b>Books</b> table in detail.

57
00:04:37 --> 00:04:42
It has 10 attributes or columns which we defined earlier:

58
00:04:43 --> 00:04:57
<b>Title, Author, Publisher, PublisherAddress, PublisherCity, PublisherPhone, PublishYear, Price, AuthorBirthDate</b> and <b>AuthorCountry</b>.

59
00:04:58 --> 00:05:02
Now, let us see how data is displayed in this table.

60
00:05:03 --> 00:05:12
Notice that each row or <b>record</b> contains information about the book, its author and its publisher.

61
00:05:13 --> 00:05:16
Now, there are two flaws in this design.

62
00:05:17 --> 00:05:22
There can be many books from the same author or the publisher.

63
00:05:23 --> 00:05:30
So, we notice that the author’s details and the publisher’s details have been repeated many times

64
00:05:31 --> 00:05:33
which wastes computer disk space.

65
00:05:34 --> 00:05:37
And a second problem with this design is:

66
00:05:38 --> 00:05:43
it runs the risk of introducing anomalies in the database.

67
00:05:44 --> 00:05:46
Now, what is an <b>anomaly</b>?

68
00:05:47 --> 00:05:52
It is simply an error or inconsistency in the database.

69
00:05:53 --> 00:05:56
There are three types of anomalies:

70
00:05:57 --> 00:06:00
The first is called an <b>insertion anomaly</b>

71
00:06:01 --> 00:06:05
which can occur when a new record is inserted.

72
00:06:06 --> 00:06:13
Or, when certain attributes cannot be inserted into the database without the presence of other attributes.

73
00:06:14 --> 00:06:20
For example, we will suppose there is a new <b>Publisher</b> called 'Penguin'.

74
00:06:21 --> 00:06:33
Now, our design will not let us insert details about Penguin publishers until our library can get a hold of at least one book by them.

75
00:06:34 --> 00:06:38
The second is called the <b>deletion anomaly</b>

76
00:06:39 --> 00:06:42
which occurs during the deletion of a record.

77
00:06:43 --> 00:06:50
Here, the deletion of a <b>row</b> or <b>record</b> in the database deletes more information than we wished to delete.

78
00:06:51 --> 00:07:00
For example, we see that the 'Orient Publishers' have only one book titled ‘Paradise Lost’, in our library.

79
00:07:01 --> 00:07:09
Now, if we delete this entire record then we lose all information on Orient Publishers.

80
00:07:10 --> 00:07:15
And we lose information about the author John Milton as well.

81
00:07:16 --> 00:07:20
And finally, let us see what <b>Update Anomaly</b> is.

82
00:07:21 --> 00:07:25
It occurs during the updating of a record.

83
00:07:26 --> 00:07:31
For example, let us suppose that Cambridge Publishers have a new address.

84
00:07:32 --> 00:07:39
Now, updating the <b>Address</b> column for this <b>Publisher</b> requires us to make a change in more than one place.

85
00:07:40 --> 00:07:42
In our case, two places.

86
00:07:43 --> 00:07:53
And, if Cambridge supplied a thousand books then it means, we need to change the address in those thousand records.

87
00:07:54 --> 00:08:01
And we might accidentally change the address in one place but forget to change it in the other places.

88
00:08:02 --> 00:08:10
So, this can lead to information not being accurate and thereby <b>data integrity</b> is lost.

89
00:08:11 --> 00:08:13
How do we solve these problems?

90
00:08:14 --> 00:08:19
We should redesign so that we record each fact just once.

91
00:08:20 --> 00:08:28
If the same information is repeated in more than one place then we should place that information in a separate <b>table</b>.

92
00:08:29 --> 00:08:30
Let us see how.

93
00:08:31 --> 00:08:37
Now we have split the <b>Books</b> table into <b>Books, Authors</b> and <b>Publisher</b>.

94
00:08:38 --> 00:08:46
Notice that the columns in each table store facts about that <b>entity</b> or subject only.

95
00:08:47 --> 00:08:54
This way, we can record the publisher information only once inside the <b>Publisher</b> table.

96
00:08:55 --> 00:09:03
Similarly, having a separate <b>Authors</b> table allows recording the author information only once.

97
00:09:04 --> 00:09:11
And we will see how we can link these tables back to the <b>Books</b> table in the next tutorial.

98
00:09:12 --> 00:09:18
This brings us to the end of this tutorial on the first part of <b>Database Design</b> in <b>LibreOffice</b>.

99
00:09:19 --> 00:09:24
To summarize, we learned the following topics on database design:

100
00:09:25 --> 00:09:27
Determining the purpose of our database

101
00:09:28 --> 00:09:31
Finding and organizing the information required

102
00:09:32 --> 00:09:35
Dividing the information into tables.

103
00:09:36 --> 00:09:47
<b>Spoken Tutorial</b> project is a part of the <b>Talk to a Teacher</b> project, supported by the National Mission on Education through ICT, MHRD, Government of India.

104
00:09:48 --> 00:09:53
This project is coordinated by <a class="external free" href="http://spoken-tutorial.org" rel="nofollow">http://spoken-tutorial.org</a>.

105
00:09:54 --> 00:09:57
More information on the same is available at the following link.

106
00:09:58 --> 00:10:03
This script has been contributed by Priya Suresh, DesiCrew Solutions. And this is Soundharya, DesiCrew Solutions, signing off.
<p>Thanks for joining.
</p>

